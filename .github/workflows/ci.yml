name: CI
on: [push, pull_request, workflow_dispatch]

jobs:
    lint:
        name: Lint and Style Check
        runs-on: ubuntu-latest

        permissions:
            contents: read

        steps:
            - name: Checkout repository
              uses: actions/checkout@v4

            - name: Install Go
              uses: actions/setup-go@v5
              with:
                  go-version-file: go.mod

            - name: golangci-lint
              uses: golangci/golangci-lint-action@v8

    test:
        name: Run Tests
        runs-on: ubuntu-latest

        permissions:
            contents: read

        steps:
            - name: Checkout repository
              uses: actions/checkout@v4

            - name: Setup Go
              uses: actions/setup-go@v5
              with:
                  go-version-file: go.mod

            - name: Install dependencies
              run: go mod download

            - name: Run tests
              run: go test -v -race -coverprofile=coverage.out ./...

            - name: Update coverage report
              uses: coverallsapp/github-action@v2
              with:
                  file: coverage.out
                  format: golang

    commit-lint:
        name: Lint Commit Messages
        runs-on: ubuntu-latest

        permissions:
            contents: read

        steps:
            - name: Checkout repository
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0

            - name: Validate commits
              run: |
                  COMMIT_TYPES="feat|fix|docs|style|refactor|test|chore|ci"

                  case ${{ github.event_name }} in
                  "pull_request")
                      # Check commits in PR
                      base=${{ github.event.pull_request.base.sha }}
                      head=${{ github.event.pull_request.head.sha }}
                      msgs=$(git log --pretty=format:%s "${base}..${head}")
                      ;;
                  "push")
                      # Check only last commit
                      msgs=$(git log --pretty=format:%s -1)
                      ;;
                  *)
                      # Check the whole commit history
                      msgs=$(git log --pretty=format:%s)
                      ;;
                  esac

                  valid=1
                  while read -r msg; do
                      if ! grep -qE "^(${COMMIT_TYPES})(\([^)]+\))?(!)?: .+" <<< "$msg"; then
                          echo "❌ [FAIL] $msg"
                          valid=0
                      else
                          echo "✅ [OK] $msg"
                      fi
                  done <<< "$msgs"

                  if [ "$valid" -ne 1 ]; then
                      echo "❌ [FAIL] Commit messages must follow Conventional Commits: 'type(scope): message'"
                      exit 1
                  fi

                  echo "✅ [OK] All commit messages are valid"
